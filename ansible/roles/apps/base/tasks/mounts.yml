---
- name: Install required packages
  apt:
    name: 
      - cifs-utils
      - bindfs
    state: present
    update_cache: yes
  become: true

- name: Mount Hetzner Volumes
  block:
    - name: Create mount points
      file:
        path: "{{ item.path }}"
        state: directory
        mode: '0755'
        owner: root
        group: root
      loop: "{{ mounts }}"

    - name: Configure mounts in fstab
      ansible.posix.mount:
        path: "{{ item.path }}"
        src: "{{ item.src }}"
        fstype: "{{ item.fstype }}"
        opts: "{{ item.opts }}"
        state: "{{ item.state }}"
      loop: "{{ mounts }}"

    - name: Reload mounts
      command: mount -a
      changed_when: false

    - name: Verify mounts
      shell: "mountpoint {{ item.path }}"
      loop: "{{ mounts }}"
      register: mount_wait
      changed_when: false
      ignore_errors: true

    - name: Fail if any mount failed
      fail:
        msg: "Failed to mount at {{ item.item.path }}"
      loop: "{{ mount_wait.results }}"
      when: item.rc != 0 and not item.failed
  become: true
  when: mounts is defined

- name: Configure S3 mounts
  block:
    # Critical rclone configuration tasks
    - name: Create rclone config directory
      file:
        path: /etc/rclone
        state: directory
        mode: '0750'
        owner: root
        group: root

    - name: Deploy rclone configuration
      template:
        src: rclone.conf.j2
        dest: /etc/rclone/rclone.conf
        mode: '0600'
        owner: root
        group: root

    # Mount setup tasks
    - name: Create mount directories
      file:
        path: "{{ item.path }}"
        state: directory
        mode: "{{ item.mode }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
      loop: "{{ s3_mounts }}"
      when: item.enabled | default(true)

    - name: Deploy S3 mount services
      template:
        src: s3-mount.service.j2
        dest: "/etc/systemd/system/s3-mount-{{ item.name }}.service"
      loop: "{{ s3_mounts }}"
      when: item.enabled | default(true)

    - name: Enable and start S3 mount services
      systemd:
        name: "s3-mount-{{ item.name }}"
        enabled: yes
        state: started
        daemon_reload: yes
      loop: "{{ s3_mounts }}"
      when: item.enabled | default(true)
  become: true
  when: s3_mounts is defined