-- Debug header to verify script execution
\echo 'Starting database creation script...'

{% for db_name, db_config in postgres_databases.items() %}
\echo 'Processing {{ db_name }}...'

-- Create user and database for {{ db_name }}
DO $$
BEGIN
  IF NOT EXISTS (SELECT FROM pg_user WHERE usename = '{{ db_name }}') THEN
    EXECUTE format('CREATE USER {{ db_name }} WITH PASSWORD ''{{ lookup('vars', 'vault_' + db_name + '_db_password') }}''');
    RAISE NOTICE 'Created user {{ db_name }}';
  END IF;
END
$$;

-- Create database if it doesn't exist
SELECT 'CREATE DATABASE {{ db_name }} OWNER {{ db_name }}'
WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '{{ db_name }}')
\gexec

\echo 'Connecting to {{ db_name }}...'
\c {{ db_name }}

-- Grant privileges on public schema (which is created by default)
GRANT ALL PRIVILEGES ON DATABASE {{ db_name }} TO {{ db_name }};
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO {{ db_name }};
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON TABLES TO {{ db_name }};

{% if db_config.schemas is defined %}
{% for schema in db_config.schemas %}
\echo 'Creating additional schema {{ schema }}...'
-- Create schema as postgres user first
CREATE SCHEMA IF NOT EXISTS {{ schema }};
-- Then grant ownership to the app user
ALTER SCHEMA {{ schema }} OWNER TO {{ db_name }};
-- Grant privileges
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA {{ schema }} TO {{ db_name }};
ALTER DEFAULT PRIVILEGES IN SCHEMA {{ schema }} GRANT ALL PRIVILEGES ON TABLES TO {{ db_name }};
{% endfor %}
{% endif %}

\echo 'Finished processing {{ db_name }}'
{% endfor %}

\echo 'Script execution complete.' 