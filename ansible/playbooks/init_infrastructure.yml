# ansible/playbooks/operations/init_infrastructure.yml
---
- name: Initialize AINI Infrastructure
  hosts: localhost
  gather_facts: true
  vars:
    # Load from .env file if running locally, or use environment variables if in container
    hcloud_token: "{{ lookup('env', 'HCLOUD_TOKEN') }}"
    s3_access_key: "{{ lookup('env', 'S3_ACCESS_KEY') }}"
    s3_secret_key: "{{ lookup('env', 'S3_SECRET_KEY') }}"
    s3_bucket: "{{ lookup('env', 'S3_BUCKET') }}"
    s3_endpoint: "{{ lookup('env', 'S3_ENDPOINT') }}"
    s3_region: "{{ lookup('env', 'S3_REGION') }}"
    timestamp: "{{ lookup('pipe', 'date +%Y%m%d_%H%M%S') }}"
    
  tasks:
    - name: Get container facts
      community.docker.current_container_facts:

    - name: Debug environment detection
      debug:
        msg: 
          - "Running in container: {{ ansible_module_running_in_container }}"
          - "Container type: {{ ansible_module_container_type }}"
          - "Container ID: {{ ansible_module_container_id }}"

    - name: Set consul host based on environment
      set_fact:
        consul_host: "{{ 'consul' if ansible_module_running_in_container else 'localhost' }}"

    - name: Check if S3 credentials exist in Consul
      uri:
        url: "http://{{ consul_host }}:8500/v1/kv/***REMOVED***/config/storage"
        method: GET
      register: consul_config
      failed_when: false

    - name: Verify required environment variables
      assert:
        that:
          - s3_access_key != ""
          - s3_secret_key != ""
          - s3_bucket != ""
          - s3_endpoint != ""
        fail_msg: "Required S3 environment variables are not set"

    - name: Save credentials to Consul if not exists
      consul_kv:
        key: "***REMOVED***/config/storage"
        value: |
          {
            "s3_enabled": true,
            "s3_access_key": "{{ s3_access_key }}",
            "s3_secret_key": "{{ s3_secret_key }}",
            "s3_bucket": "{{ s3_bucket }}",
            "s3_endpoint": "{{ s3_endpoint }}",
            "s3_region": "{{ s3_region }}"
          }
      when: consul_config.status != 200

    # First check if environment config exists
    - name: Check if environment config exists in Consul
      uri:
        url: "http://{{ consul_host }}:8500/v1/kv/***REMOVED***/config/environment"
        method: GET
      register: env_config
      failed_when: false

    # Then save environment variables regardless of storage config
    - name: Save all environment variables to Consul
      consul_kv:
        key: "***REMOVED***/config/{{ item.key }}"
        value: |
          {{ item.value | to_json }}
      loop:
        - key: "environment/hcloud"
          value:
            token: "{{ hcloud_token }}"
            app_server_type: "{{ lookup('env', 'APP_SERVER_TYPE') }}"
            gpu_server_type: "{{ lookup('env', 'GPU_SERVER_TYPE') }}"
        - key: "environment/storage"
          value:
            s3_enabled: "{{ lookup('env', 'S3_ENABLED') | default('false') }}"
            s3_access_key: "{{ s3_access_key }}"
            s3_secret_key: "{{ s3_secret_key }}"
            s3_bucket: "{{ s3_bucket }}"
            s3_endpoint: "{{ s3_endpoint }}"
            s3_region: "{{ s3_region }}"
        - key: "environment/debug"
          value:
            enabled: "{{ lookup('env', 'DEBUG') | default('false') }}"
      when: env_config.status != 200

    - name: Create test key
      consul_kv:
        key: "test/init"
        value: "Initialization test at {{ timestamp }}"
        host: "{{ consul_host }}"